/*
 * imx585_mode_tbls.h - imx585 sensor mode tables
 *
 * Copyright (c) 2022, ScaleAQ. All rights reserved.
 *
 * Contact us: post@scaleaq.com
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms and conditions of the GNU General Public License,
 * version 2, as published by the Free Software Foundation.
 *
 * This program is distributed in the hope it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#ifndef __IMX585_I2C_TABLES__
#define __IMX585_I2C_TABLES__

#include <media/camera_common.h>

#define IMX585_TABLE_WAIT_MS 0
#define IMX585_TABLE_END 1
#define IMX585_WAIT_MS 1
#define IMX585_STANDBY_REG 0x3000
#define IMX585_XMSTA_REG   0x3002

#define imx585_reg struct reg_8

static const imx585_reg imx585_start[] = {
	{IMX585_STANDBY_REG, 0x0},
	{IMX585_TABLE_WAIT_MS, 30},
	{IMX585_XMSTA_REG, 0x00},
	{IMX585_TABLE_WAIT_MS, IMX585_WAIT_MS},

	{IMX585_TABLE_END, 0x00}
};

static const imx585_reg imx585_stop[] = {
	{IMX585_XMSTA_REG, 0x01},
	{IMX585_TABLE_WAIT_MS, 30},
	{IMX585_STANDBY_REG, 0x1},
	{IMX585_TABLE_WAIT_MS, IMX585_WAIT_MS},

	{IMX585_TABLE_END, 0x00}
};

static const imx585_reg imx585_mode_common[] = {
	{IMX585_TABLE_WAIT_MS, IMX585_WAIT_MS},

	{0x3014, 0x01},
	{0x3460, 0x21},
	{0x3478, 0xa1},
	{0x347c, 0x01},
	{0x3480, 0x01},
	{0x3a4e, 0x14},
	{0x3a52, 0x14},
	{0x3a56, 0x00},
	{0x3a5a, 0x00},
	{0x3a5e, 0x00},
	{0x3a62, 0x00},
	{0x3a6a, 0x20},
	{0x3a6c, 0x42},
	{0x3a6e, 0xa0},
	{0x3b2c, 0x0c},
	{0x3B30, 0x1C},
	{0x3B34, 0x0C},
	{0x3B38, 0x1C},
	{0x3BA0, 0x0C},
	{0x3BA4, 0x1C},
	{0x3BA8, 0x0C},
	{0x3BAC, 0x1C},
	{0x3D3C, 0x11},
	{0x3D46, 0x0B},
	{0x3DE0, 0x3F},
	{0x3DE1, 0x08},
	{0x3E14, 0x87},
	{0x3E16, 0x91},
	{0x3E18, 0x91},
	{0x3E1A, 0x87},
	{0x3E1C, 0x78},
	{0x3E1E, 0x50},
	{0x3E20, 0x50},
	{0x3E22, 0x50},
	{0x3E24, 0x87},
	{0x3E26, 0x91},
	{0x3E28, 0x91},
	{0x3E2A, 0x87},
	{0x3E2C, 0x78},
	{0x3E2E, 0x50},
	{0x3E30, 0x50},
	{0x3E32, 0x50},
	{0x3E34, 0x87},
	{0x3E36, 0x91},
	{0x3E38, 0x91},
	{0x3E3A, 0x87},
	{0x3E3C, 0x78},
	{0x3E3E, 0x50},
	{0x3E40, 0x50},
	{0x3E42, 0x50},
	{0x4054, 0x64},
	{0x4148, 0xFE},
	{0x4149, 0x05},
	{0x414A, 0xFF},
	{0x414B, 0x05},
	{0x420A, 0x03},
	{0x423D, 0x9C},
	{0x4242, 0xB4},
	{0x4246, 0xB4},
	{0x424E, 0xB4},
	{0x425C, 0xB4},
	{0x425E, 0xB6},
	{0x426C, 0xB4},
	{0x426E, 0xB6},
	{0x428C, 0xB4},
	{0x428E, 0xB6},
	{0x4708, 0x00},
	{0x4709, 0x00},
	{0x470A, 0xFF},
	{0x470B, 0x03},
	{0x470C, 0x00},
	{0x470D, 0x00},
	{0x470E, 0xFF},
	{0x470F, 0x03},
	{0x47EB, 0x1C},
	{0x47F0, 0xA6},
	{0x47F2, 0xA6},
	{0x47F4, 0xA0},
	{0x47F6, 0x96},
	{0x4808, 0xA6},
	{0x480A, 0xA6},
	{0x480C, 0xA0},
	{0x480E, 0x96},
	{0x492C, 0xB2},
	{0x4930, 0x03},
	{0x4932, 0x03},
	{0x4936, 0x5B},
	{0x4938, 0x82},
	{0x493e, 0x23},
	{0x4BA8, 0x1C},
	{0x4BA9, 0x03},
	{0x4BAC, 0x1C},
	{0x4BAD, 0x1C},
	{0x4BAE, 0x1C},
	{0x4BAF, 0x1C},
	{0x4BB0, 0x1C},
	{0x4BB1, 0x1C},
	{0x4BB2, 0x1C},
	{0x4BB3, 0x1C},
	{0x4BB4, 0x1C},
	{0x4BB8, 0x03},
	{0x4BB9, 0x03},
	{0x4BBA, 0x03},
	{0x4BBB, 0x03},
	{0x4BBC, 0x03},
	{0x4BBD, 0x03},
	{0x4BBE, 0x03},
	{0x4BBF, 0x03},
	{0x4BC0, 0x03},
	{0x4C14, 0x87},
	{0x4C16, 0x91},
	{0x4C18, 0x91},
	{0x4C1A, 0x87},
	{0x4C1C, 0x78},
	{0x4C1E, 0x50},
	{0x4C20, 0x50},
	{0x4C22, 0x50},
	{0x4C24, 0x87},
	{0x4C26, 0x91},
	{0x4C28, 0x91},
	{0x4C2A, 0x87},
	{0x4C2C, 0x78},
	{0x4C2E, 0x50},
	{0x4C30, 0x50},
	{0x4C32, 0x50},
	{0x4C34, 0x87},
	{0x4C36, 0x91},
	{0x4C38, 0x91},
	{0x4C3A, 0x87},
	{0x4C3C, 0x78},
	{0x4C3E, 0x50},
	{0x4C40, 0x50},
	{0x4C42, 0x50},
	{0x4D12, 0x1F},
	{0x4D13, 0x1E},
	{0x4D26, 0x33},
	{0x4E0E, 0x59},
	{0x4E14, 0x55},
	{0x4E16, 0x59},
	{0x4E1E, 0x3B},
	{0x4E20, 0x47},
	{0x4E22, 0x54},
	{0x4E26, 0x81},
	{0x4E2C, 0x7D},
	{0x4E2E, 0x81},
	{0x4E36, 0x63},
	{0x4E38, 0x6F},
	{0x4E3A, 0x7C},
	{0x4F3A, 0x3C},
	{0x4F3C, 0x46},
	{0x4F3E, 0x59},
	{0x4F42, 0x64},
	{0x4F44, 0x6E},
	{0x4F46, 0x81},
	{0x4F4A, 0x82},
	{0x4F5A, 0x81},
	{0x4F62, 0xAA},
	{0x4F72, 0xA9},
	{0x4F78, 0x36},
	{0x4F7A, 0x41},
	{0x4F7C, 0x61},
	{0x4F7D, 0x01},
	{0x4F7E, 0x7C},
	{0x4F7F, 0x01},
	{0x4F80, 0x77},
	{0x4F82, 0x7B},
	{0x4F88, 0x37},
	{0x4F8A, 0x40},
	{0x4F8C, 0x62},
	{0x4F8D, 0x01},
	{0x4F8E, 0x76},
	{0x4F8F, 0x01},
	{0x4F90, 0x5E},
	{0x4F91, 0x02},
	{0x4F92, 0x69},
	{0x4F93, 0x02},
	{0x4F94, 0x89},
	{0x4F95, 0x02},
	{0x4F96, 0xA4},
	{0x4F97, 0x02},
	{0x4F98, 0x9F},
	{0x4F99, 0x02},
	{0x4F9A, 0xA3},
	{0x4F9B, 0x02},
	{0x4FA0, 0x5F},
	{0x4FA1, 0x02},
	{0x4FA2, 0x68},
	{0x4FA3, 0x02},
	{0x4FA4, 0x8A},
	{0x4FA5, 0x02},
	{0x4FA6, 0x9E},
	{0x4FA7, 0x02},
	{0x519E, 0x79},
	{0x51A6, 0xA1},
	{0x51F0, 0xAC},
	{0x51F2, 0xAA},
	{0x51F4, 0xA5},
	{0x51F6, 0xA0},
	{0x5200, 0x9B},
	{0x5202, 0x91},
	{0x5204, 0x87},
	{0x5206, 0x82},
	{0x5208, 0xAC},
	{0x520A, 0xAA},
	{0x520C, 0xA5},
	{0x520E, 0xA0},
	{0x5210, 0x9B},
	{0x5212, 0x91},
	{0x5214, 0x87},
	{0x5216, 0x82},
	{0x5218, 0xAC},
	{0x521A, 0xAA},
	{0x521C, 0xA5},
	{0x521E, 0xA0},
	{0x5220, 0x9B},
	{0x5222, 0x91},
	{0x5224, 0x87},
	{0x5226, 0x82},

	{IMX585_TABLE_END, 0x0000}

};

static const imx585_reg imx585_mode_3856x2180_30fps[] = {
	{0x3015, 0x02},
	{0x301b, 0x00},
	{0x3022, 0x02},
	{0x3023, 0x01},
	{0x302c, 0x4c}, // HMAX
	{0x302d, 0x04},
	{0x3040, 0x01},
	{0x3050, 0x08},
	{0x30a6, 0x0f},
	{0x30d5, 0x04},
	{0x3930, 0x0c},
	{0x3931, 0x01},
	{0x3a4c, 0x39},
	{0x3a4d, 0x01},
	{0x3a50, 0x48},
	{0x3a51, 0x01},
	{0x3e10, 0x10},
	{0x4231, 0x08},
	{0x493c, 0x23},
	{0x4940, 0x23},

	{0x301a, 0x00},
	{0x3024, 0x00},
	{0x36ef, 0x00},

	{0x306A, 0x00},

	{IMX585_TABLE_WAIT_MS, IMX585_WAIT_MS},
	{IMX585_TABLE_END, 0x0000}
};

static const imx585_reg imx585_mode_1928x1090_30fps[] = {
	{0x3015, 0x03},
	{0x301b, 0x01},
	{0x3022, 0x00},
	{0x3023, 0x01},
	{0x302c, 0x4c},
	{0x302d, 0x04},
	{0x3040, 0x01},
	{0x3050, 0x08},
	{0x30a6, 0x0f},
	{0x30d5, 0x02},
	{0x3930, 0x66},
	{0x3931, 0x00},
	{0x3a4c, 0x39},
	{0x3a4d, 0x01},
	{0x3a50, 0x48},
	{0x3a51, 0x01},
	{0x3e10, 0x10},
	{0x4231, 0x18},
	{0x493c, 0x23},
	{0x4940, 0x23},

	{0x301a, 0x00},
	{0x3024, 0x00},
	{0x36ef, 0x00},

	{0x306A, 0x00},

	{IMX585_TABLE_WAIT_MS, IMX585_WAIT_MS},
	{IMX585_TABLE_END, 0x0000}
};

static const imx585_reg imx585_mode_clear_hdr[] = {
	// 2 lanes
	{0x3015, 0x00},
	{0x3022, 0x00},
	{0x3023, 0x00},

	{0x3028, 0x94},
	{0x3029, 0x11},
	{0x302a, 0x00},
	{0x302c, 0x94},
	{0x302d, 0x02},

	{0x3040, 0x01},

	{0x3050, 0x10},

	{0x3069, 0x02},
	{0x3074, 0x63},

	{0x306c, 0x00},
	{0x306d, 0x00},

	{0x3050, 0x92},
	{0x3051, 0x11},
	{0x3052, 0x00},

	{0x30a4, 0xa0},
	{0x30a6, 0x00},
	{0x3460, 0x21},

	{0x4231, 0x18},

	{0x4940, 0x23},

	{0x301a, 0x10},

	{0x3024, 0x02},

	{0x36d0, 0xa0}, // EXP_TH_H
	{0x36d1, 0x02},
	{0x36d4, 0x80}, // EXP_TH_L
	{0x36d5, 0x01},
	{0x36e2, 0x00}, // EXP_BK, 1/2 LG & HG

	// compression
	{0x36e4, 0x00}, // CCMP2_EXP
	{0x36e5, 0x40},
	{0x36e6, 0x00},

	{0x36e8, 0x80}, // CCMP1_EXP
	{0x36e9, 0x01},
	{0x36ea, 0x00},

	{0x36ec, 0x06}, // ACMP2_EXP
	{0x36ee, 0x05}, // ACMP1_EXP
	{0x36ef, 0x01}, // CCMP_EN

	{0x3081, 0x01}, // GAIN_EXP

	// direct gain control
	{0x306A, 0x00}, // CHDR_GAIN_EN
	{0x308C, 0x00},
	{0x308d, 0x01},
	{0x3094, 0x00},
	{0x3095, 0x00},
	{0x309C, 0x30},
	{0x309d, 0x00},

	{0x3930, 0x5c},
	{0x3931, 0x00},
	{0x3a4c, 0x61},
	{0x3a4d, 0x02},
	{0x3a50, 0x70},
	{0x3a51, 0x02},
	{0x3e10, 0x17},
	{0x493c, 0x41},

	{IMX585_TABLE_WAIT_MS, IMX585_WAIT_MS},
	{IMX585_TABLE_END, 0x0000}
};

static const imx585_reg imx585_mode_3856x2180_30fps_10bits[] = {
	// 2 lanes
	{0x3015, 0x00},
	{0x301a, 0x00},
	{0x3022, 0x00},
	{0x3023, 0x00},
	{0x3024, 0x00},

	{0x3028, 0x94},
	{0x3029, 0x11},
	{0x302a, 0x00},
	{0x302c, 0x94},
	{0x302d, 0x02},

	{0x3040, 0x01},

	{0x3050, 0x10},

	{0x3069, 0x02},
	{0x3074, 0x63},

	{0x30a4, 0xa0},
	{0x30a6, 0x00},
	{0x3460, 0x21},

	{0x4231, 0x18},

	{0x3930, 0x66},
	{0x3931, 0x00},
	{0x3a4c, 0x39},
	{0x3a4d, 0x01},
	{0x3a50, 0x48},
	{0x3a51, 0x01},
	{0x3e10, 0x10},
	{0x493c, 0x23},
	{0x4940, 0x23},

	{0x301a, 0x00},
	{0x3024, 0x00},
	{0x36ef, 0x00},

	{0x306A, 0x00},

	{IMX585_TABLE_WAIT_MS, IMX585_WAIT_MS},
	{IMX585_TABLE_END, 0x0000}
};

static const imx585_reg imx585_mode_pattern_enable[] = {
	{0x30dc, 0x00}, // clear black level
	{0x30e0, 0x01},
	{0x30e2, 0x0a}, // Default is horizontal color-bar chart
	{0x30e4, 0x01}, // Default color width is 160pixel
	{0x5300, 0x0a},


	{IMX585_TABLE_WAIT_MS, IMX585_WAIT_MS},
	{IMX585_TABLE_END, 0x0000}
};

static const imx585_reg imx585_mode_pattern_disable[] = {
	{0x30dc, 0x32},
	{0x30e0, 0x00},
	{0x5300, 0x02},

	{IMX585_TABLE_WAIT_MS, IMX585_WAIT_MS},
	{IMX585_TABLE_END, 0x0000}
};

enum {
	IMX585_MODE_3856x2180_30FPS,
	IMX585_MODE_1928x1090_30FPS,
	IMX585_MODE_3856x2180_30FPS_10B,
	IMX585_MODE_3856x2180_25FPS_CHDR,
	IMX585_MODE_COMMON,
	IMX585_MODE_TEST_PATTERN_EN,
	IMX585_MODE_TEST_PATTERN_DIS,
	IMX585_START_STREAM,
	IMX585_STOP_STREAM,
};

static const imx585_reg *mode_table[] = {
	[IMX585_MODE_3856x2180_30FPS] = imx585_mode_3856x2180_30fps,
	[IMX585_MODE_1928x1090_30FPS] = imx585_mode_1928x1090_30fps,
	[IMX585_MODE_3856x2180_30FPS_10B] = imx585_mode_3856x2180_30fps_10bits,
	[IMX585_MODE_3856x2180_25FPS_CHDR] = imx585_mode_clear_hdr,
	[IMX585_MODE_COMMON] = imx585_mode_common,
	[IMX585_MODE_TEST_PATTERN_EN] = imx585_mode_pattern_enable,
	[IMX585_MODE_TEST_PATTERN_DIS] = imx585_mode_pattern_disable,
	[IMX585_START_STREAM] = imx585_start,
	[IMX585_STOP_STREAM] = imx585_stop,
};

static const int imx585_30_fr[] = {
	30,
};

static const int imx585_25_fr[] = {
	25,
};

static const struct camera_common_frmfmt imx585_frmfmt[] = {
	{{3856, 2180}, imx585_30_fr, 1, 0, IMX585_MODE_3856x2180_30FPS},
	{{1928, 1090}, imx585_30_fr, 1, 0, IMX585_MODE_1928x1090_30FPS},
	{{3856, 2180}, imx585_30_fr, 1, 0, IMX585_MODE_3856x2180_30FPS_10B},
	{{3856, 2180}, imx585_25_fr, 1, 1, IMX585_MODE_3856x2180_25FPS_CHDR},
};
#endif /* __IMX585_I2C_TABLES__ */
